# This file should be included from Makefiles inside
# module subdirs.
#
# Module name equals to the subdir name. Module h-file should
# have the same name (with .h extension)
#
# Before using define following variables:
# HEADERS -- list of headers (with .h extension)
# SOURCES -- list of sources (with .cpp extension, if any)
# SIMPLE_TESTS -- simle tests: programs returning 0/1 (without test extension).
#                 For each <name> should be a source <name>.test.cpp.
# SCRIPT_TESTS -- script_tests: programs with testing scripts.
#                 For each <name> should be a source <name>.test.cpp and
#                 a script <name>.test.script

######################################################

NAME       := $(shell a=$$(pwd); echo $${a\#\#*/})
STATIC_LIB := $(NAME).a
OBJECTS    := $(patsubst %.cpp, %.o, $(SOURCES))
MODDIR     ?= ..

# extract #include statements from SOURCES and HEADERS:
HDEPS := $(shell [ "$(SOURCES)$(HEADERS)" = "" ] ||\
          sed -rne 's|^\#include +"([^/]*/[^/]*)".*|$(MODDIR)/\1|p'\
          $(SOURCES) $(HEADERS) | sort -u)

## module dirs:
## old code (without get_dep script)
#MDEPS := $(shell for i in $(HDEPS); do echo $${i%/*}; done | sort -u)

## module dirs:
MDEPS := $(shell $(MODDIR)/get_deps $(MODDIR) $(NAME))

# a-files
ADEPS := $(shell for i in $(MDEPS); do echo $(MODDIR)/$$i/$${i\#*/}.a; done | tac)

ALL_TESTS   := $(SIMPLE_TESTS) $(SCRIPT_TESTS)
SIMPLE_TEST_PROGS := $(patsubst %, %.test, $(SIMPLE_TESTS))
SCRIPT_TEST_PROGS := $(patsubst %, %.test, $(SCRIPT_TESTS))
SIMPLE_TEST_RES   := $(patsubst %, %.test.passed, $(SIMPLE_TESTS))
SCRIPT_TEST_RES   := $(patsubst %, %.test.passed, $(SCRIPT_TESTS))
ALL_TEST_PROGS    := $(SIMPLE_TEST_PROGS) $(SCRIPT_TEST_PROGS)
ALL_TEST_RES      := $(SIMPLE_TEST_RES) $(SCRIPT_TEST_RES)

$(SIMPLE_TEST_RES): TEST_DEP := ''
$(SCRIPT_TEST_RES): TEST_DEP := %.test.script
$(SIMPLE_TEST_RES): TEST_CMD = ./$< && > $<.passed
$(SCRIPT_TEST_RES): TEST_CMD = ./$<.script && > $<.passed

override CXXFLAGS += $(shell [ "$(PKG_CONFIG)" == "" ] || pkg-config --cflags '$(PKG_CONFIG)')
override LDLIBS   += $(shell [ "$(PKG_CONFIG)" == "" ] || pkg-config --libs '$(PKG_CONFIG)')
override CPPFLAGS += -I$(MODDIR)
override CPPFLAGS += -std=gnu++11 -Werror=return-type -O2

######################################################
# building a module: print info, make dependencies,
# build static library, build and run tests
all: make_deps $(STATIC_LIB) $(ALL_TEST_RES)
nodep: $(STATIC_LIB) $(ALL_TEST_RES)

######################################################
## dependencies

## old code (without get_deps script): works fine,
## but visits modules more then once
# make_deps:
# 	@if [ -f $ $(NAME).lock ]; then\
# 	  echo "### error: infinit dependency loop or outdated lock file for $(NAME) ###";\
# 	  rm -f $(NAME).lock;\
# 	  false;\
# 	fi
# 	@touch $(NAME).lock
# 	@echo "###########################"
# 	@echo "## Building dependencies for $(NAME): $(MDEPS)"
# 	@for i in $(MDEPS); do \
# 	  $(MAKE) -C $$i || (rm -f $(NAME).lock && false);\
# 	done
# 	@rm -f $(NAME).lock

make_deps:
	@echo "Dependencies for $(NAME): [$(MDEPS)]"
	@for i in $(MDEPS); do $(MAKE) -C $(MODDIR)/$$i nodep; done

######################################################
# static library
$(OBJECTS): $(HEADERS) $(HDEPS)

$(STATIC_LIB): $(OBJECTS)
	@echo "## Building static library for $(NAME):"
	ar rs $@ $+

######################################################
# tests

%.test: %.test.cpp $(OBJECTS) $(ADEPS) $(HDEPS) $(HEADERS)
	$(CXX) $(CPPFLAGS) $(LDFLAGS) $< $(OBJECTS) $(ADEPS) $(LDLIBS) -o $@

%.test.passed: %.test $(TEST_DEP)
	@echo "## Running test:"
	$(TEST_CMD)

######################################################
clean:
	rm -f *.o $(ALL_TEST_PROGS) $(ALL_TEST_RES) $(STATIC_LIB)

print_info:
	@echo "###########################"
	@echo "## Module <<$(NAME)>>"
	@echo "STATIC_LIB:   $(STATIC_LIB)"
	@echo "SOURCES:      $(SOURCES)"
	@echo "HEADERS:      $(HEADERS)"
	@echo "HDEPS:        $(HDEPS)"
	@echo "MDEPS:        $(MDEPS)"
	@echo "ADEPS:        $(ADEPS)"
	@echo "LDLIBS:       $(LDLIBS)"
	@echo "SIMPLE_TESTS: $(SIMPLE_TESTS)"
	@echo "SCRIPT_TESTS: $(SCRIPT_TESTS)"
